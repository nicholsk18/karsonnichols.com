---
import { cn } from "../../utils/helpers";

type Props = {
  to: string;
  variant?: "outline" | "outline-blue" | "filled" | "text" | "icon" | "unstyled";
  classList?: string;
  target?: string;
  rel?: string;
  ariaLabel?: string;
};

const { to, variant, classList = "", target, rel, ariaLabel, ...rest } = Astro.props;

const defaultClass = "block text-blue-base font-bold uppercase cursor-pointer w-fit";
const outlineClass =
  "relative border-2 border-orange-base px-10 rounded py-1 transition-all duration-300 text-orange-base hover:text-white shadow-md hover:shadow-lg hover:scale-[1.02] overflow-hidden group";
const outlineBlueClass =
  "relative border-2 border-blue-base px-10 rounded py-1 transition-all duration-300 text-blue-base hover:text-white shadow-md hover:shadow-lg hover:scale-[1.02] overflow-hidden group";
const filledClass =
  "relative border-2 border-orange-base px-10 rounded py-1 transition-all duration-300 bg-gradient-to-br from-orange-base to-[#d13c04] text-white hover:from-[#d13c04] hover:to-orange-base shadow-md hover:shadow-lg hover:scale-[1.02] overflow-hidden group";
const textClass = "text-gray-400 hover:text-orange-base transition-colors";
const iconClass = "text-gray-400 hover:text-orange-base transition-colors";
const unstyledClass = "";
---

<a
  href={to}
  class:list={cn([
    variant !== "unstyled" && variant !== "icon" && defaultClass,
    variant === "outline" && outlineClass,
    variant === "outline-blue" && outlineBlueClass,
    variant === "filled" && filledClass,
    variant === "text" && textClass,
    variant === "icon" && iconClass,
    variant === "unstyled" && unstyledClass,
    classList,
  ])}
  target={target}
  rel={rel}
  aria-label={ariaLabel}
  {...rest}
>
  {
    variant === "outline" && (
      <span class="absolute inset-0 bg-gradient-to-br from-orange-base to-[#d13c04] opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
    )
  }
  {
    variant === "outline-blue" && (
      <span class="absolute inset-0 bg-gradient-to-br from-blue-base to-[#021a3a] opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
    )
  }
  {
    (variant === "filled" || variant === "outline" || variant === "outline-blue") && (
      <span class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700 ease-in-out" />
    )
  }
  <span class="relative z-10">
    <slot />
  </span>
</a>
